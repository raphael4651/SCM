/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.64
 * Generated at: 2022-08-03 03:12:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class googleChart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>구글차트 With mysql</title>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://www.google.com/jsapi\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	var queryObject = \"\";\r\n");
      out.write("	var queryObjectLen = \"\";\r\n");
      out.write("\r\n");
      out.write("	/* 비동기 통신 방식으로 JSON 데이터를 출력한다. */\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		type : 'POST', /* 전송방식 */\r\n");
      out.write("		url : 'getData.jsp', /* 데이터를 가져올 위치 */\r\n");
      out.write("		dataType : 'json', /* 가져올 데이터 형태 */\r\n");
      out.write("		//비동기 통신 성공시\r\n");
      out.write("		success : function(data) {\r\n");
      out.write("			queryObject = eval('(' + JSON.stringify(data) + ')');\r\n");
      out.write("			queryObjectLen = queryObject.empdetails.length;\r\n");
      out.write("		},\r\n");
      out.write("		//실패시\r\n");
      out.write("		error : function(xhr, type) {\r\n");
      out.write("			alert('server error occoured')\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("	google.load(\"visualization\", \"1\", {\r\n");
      out.write("		packages : [ \"corechart\" ]\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("	google.setOnLoadCallback(drawChart);\r\n");
      out.write("\r\n");
      out.write("	function drawChart() {\r\n");
      out.write("		var data = new google.visualization.DataTable();\r\n");
      out.write("\r\n");
      out.write("		data.addColumn('string', 'name');\r\n");
      out.write("		data.addColumn('number', 'saleqty');\r\n");
      out.write("\r\n");
      out.write("		/* json 데이터를 가져온다. */\r\n");
      out.write("		for (var i=0;i<queryObjectLen;i++) {\r\n");
      out.write("			\r\n");
      out.write("			//사원명\r\n");
      out.write("			var name = queryObject.empdetails[i].name;\r\n");
      out.write("			//판매수량\r\n");
      out.write("			var saleqty = queryObject.empdetails[i].saleqty;\r\n");
      out.write("			\r\n");
      out.write("			//JSON 형태의 데이터를 구글 차트에 추가\r\n");
      out.write("			data.addRows([ [ name,saleqty] ]);\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		var options = {\r\n");
      out.write("			title : '사원별 판매 현황',\r\n");
      out.write("		};\r\n");
      out.write("\r\n");
      out.write("		var chart = new google.visualization.PieChart(document.getElementById('chart_div'));\r\n");
      out.write("\r\n");
      out.write("		chart.draw(data, options);\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		var chart = new google.visualization.LineChart(document.getElementById('chart_div2'));\r\n");
      out.write("\r\n");
      out.write("		chart.draw(data, options);\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div id=\"chart_div\"></div>\r\n");
      out.write("	<div id=\"chart_div2\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
