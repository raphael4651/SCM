/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.64
 * Generated at: 2022-08-03 03:13:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.text.SimpleDateFormat;

public final class chatting_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/bootstrap.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+KR&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<!-- 부트스트랩 4.5 -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

	String id = "";

	if (session.getAttribute("sessionId") != null) {
		id = (String) session.getAttribute("sessionId");
	}
	
	String nick = "";
	
	//로그인 정보가 없으면 닉네임을 NULL로 지정
	if (session.getAttribute("sessionId") != null) {
		nick = (String) session.getAttribute("sessionId");
	} else {
		nick = "Guest";
	}
	
	//메시지 보낸 시간
	Date date = new Date();
    SimpleDateFormat simpleDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    String strdate = simpleDate.format(date);


      out.write("\r\n");
      out.write("<div id=\"messageWindow2\"  style=\"background-image:url('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/images/hpimage2.jpg');width:300px;height:539px;overflow: auto;\"></div>\r\n");
      out.write("<br>\r\n");
      out.write("<div class=\"input-group mb-3\">\r\n");
      out.write("	<input type=\"text\" class=\"form-control col-sm-2 pt-3\" \r\n");
      out.write("		   onkeydown=\"if(event.keyCode==13){send();}\" \r\n");
      out.write("		   id=\"inputMessage\"/>\r\n");
      out.write("		   \r\n");
      out.write("	<input type=\"submit\" class=\"btn btn-primary\" value=\"전송\" onclick=\"send();\" />\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	//WebSocket은 클라이언트(웹 브라우저)와 서버(웹 서버)가 양방향 통신\r\n");
      out.write("	var webSocket = new WebSocket('ws://localhost:8080/Chatting/broadcasting');\r\n");
      out.write("	var inputMessage = document.getElementById('inputMessage');\r\n");
      out.write("	var re_send = \"\";	//같은 이가 여러번 보낼때 이름 판별할 변수\r\n");
      out.write("	\r\n");
      out.write("	//웹 소켓이 에러가 났을 때 호출되는 이벤트\r\n");
      out.write("	webSocket.onerror = function(event) {\r\n");
      out.write("		onError(event)\r\n");
      out.write("	};\r\n");
      out.write("	\r\n");
      out.write("	//웹 소켓이 연결되었을 때 호출되는 이벤트\r\n");
      out.write("	webSocket.onopen = function(event) {\r\n");
      out.write("		onOpen(event)\r\n");
      out.write("	};\r\n");
      out.write("	\r\n");
      out.write("	//웹 소켓에서 메시시가 오면 호출되는 이벤트\r\n");
      out.write("	webSocket.onmessage = function(event) {\r\n");
      out.write("		onMessage(event)\r\n");
      out.write("	};\r\n");
      out.write("	\r\n");
      out.write("	//웹 소켓이 끊겼을 때 동작하는 함수.\r\n");
      out.write("	function onClose(event){\r\n");
      out.write("		var div=document.createElement('div');\r\n");
      out.write("		\r\n");
      out.write("		//접속했을 때 접속자들에게 알릴 내용.\r\n");
      out.write("		webSocket.send(\"");
      out.print(nick);
      out.write(" is disconnected\\n\");\r\n");
      out.write("	}\r\n");
      out.write("	//	OnMessage는 클라이언트에서 서버 측으로 메시지를 보내면 호출되는 함수.\r\n");
      out.write("	function onMessage(event) {\r\n");
      out.write("		//클라이언트에서 날아온 메시지를 |\\| 단위로 분리한다\r\n");
      out.write("		var message = event.data.split(\"|\\|\");\r\n");
      out.write("			//금방 보낸 이를 re_send에 저장하고,금방 보낸 이가 다시 보낼경우 보낸이 출력 없도록 함.\r\n");
      out.write("			if(message[0] != re_send){\r\n");
      out.write("				//messageWindow2에 붙이기\r\n");
      out.write("				var who = document.createElement('div');\r\n");
      out.write("				who.style[\"padding\"]=\"3px\";\r\n");
      out.write("				who.style[\"margin-left\"]=\"23px\";\r\n");
      out.write("				who.style[\"font-size\"]=\"15px\"\r\n");
      out.write("				who.style['color'] =\"white\"\r\n");
      out.write("			    who.style[\"font-family\"]=\"Noto Sans KR\"\r\n");
      out.write("				who.innerHTML = message[0];\r\n");
      out.write("				document.getElementById('messageWindow2').appendChild(who);\r\n");
      out.write("				re_send = message[0];\r\n");
      out.write("			}\r\n");
      out.write("			//div는 받은 Message 출력할 공간.\r\n");
      out.write("			var div=document.createElement('div');\r\n");
      out.write("			div.style[\"width\"]= \"auto\";\r\n");
      out.write("			div.style[\"word-wrap\"] = \"break-word\";\r\n");
      out.write("			div.style[\"display\"] = \"inline-block\";\r\n");
      out.write("			div.style[\"background-color\"] = \"#EAEAEA\";\r\n");
      out.write("			div.style[\"border-radius\"] = \"10px\";\r\n");
      out.write("			div.style[\"padding\"] = \"3px\";\r\n");
      out.write("			div.style[\"margin-left\"] = \"23px\";\r\n");
      out.write("			div.style[\"font-size\"] = \"15px\"\r\n");
      out.write("		    div.style['color'] = \"black\"\r\n");
      out.write("			div.style[\"font-family\"] = \"Noto Sans KR\"\r\n");
      out.write("			div.innerHTML =  message[1]+\"<br>\" +message[2];\r\n");
      out.write("			document.getElementById('messageWindow2').appendChild(div);\r\n");
      out.write("			//clear div 추가. 줄바꿈용.		\r\n");
      out.write("			var clear=document.createElement('div');\r\n");
      out.write("			clear.style[\"clear\"]=\"both\";\r\n");
      out.write("			document.getElementById('messageWindow2').appendChild(clear);\r\n");
      out.write("			//div 스크롤 아래로.\r\n");
      out.write("			messageWindow2.scrollTop = messageWindow2.scrollHeight;\r\n");
      out.write("     }\r\n");
      out.write("	//	OnOpen은 서버 측에서 클라이언트와 웹 소켓 연결이 되었을 때 호출되는 함수.\r\n");
      out.write("	function onOpen(event) { //접속했을 때, 내 영역에 보이는 글.\r\n");
      out.write("			var div=document.createElement('div');\r\n");
      out.write("			div.style[\"text-align\"]=\"center\";\r\n");
      out.write("			div.style[\"font-size\"]=\"15px\"\r\n");
      out.write("			div.style[\"font-family\"]=\"Noto Sans KR\"\r\n");
      out.write("			div.style['color'] =\"blue\"\r\n");
      out.write("			div.style[\"margin-top\"]=\"63px\";\r\n");
      out.write("			//div.innerHTML = \"반갑습니다.\";\r\n");
      out.write("			document.getElementById('messageWindow2').appendChild(div);\r\n");
      out.write("			var clear=document.createElement('div');\r\n");
      out.write("			clear.style[\"clear\"]=\"both\";\r\n");
      out.write("			document.getElementById('messageWindow2').appendChild(clear);\r\n");
      out.write("			//접속했을 때 접속자들에게 알릴 내용.\r\n");
      out.write("			");
      out.write("\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	//	OnError는 웹 소켓이 에러가 나면 발생을 하는 함수.\r\n");
      out.write("	function onError(event) {\r\n");
      out.write("			alert(\"chat_server connecting error \" + event.data);\r\n");
      out.write("	}\r\n");
      out.write("	// send 함수를 통해서 웹소켓으로 메시지를 보낸다.\r\n");
      out.write("	function send() {\r\n");
      out.write("		//inputMessage가 있을때만 전송가능\r\n");
      out.write("		if(inputMessage.value!=\"\"){\r\n");
      out.write("			//	서버에 보낼때 날아가는 값.\r\n");
      out.write("			webSocket.send(\"");
      out.print(nick);
      out.write("|\\|\" + \"");
      out.print(strdate);
      out.write("|\\|\"+ inputMessage.value);\r\n");
      out.write("			// 채팅화면 div에 붙일 내용\r\n");
      out.write("			var div=document.createElement('div');\r\n");
      out.write("			div.style[\"width\"]=\"auto\";\r\n");
      out.write("			div.style[\"word-wrap\"]=\"break-word\";\r\n");
      out.write("			div.style[\"float\"]=\"right\";\r\n");
      out.write("			div.style[\"display\"]=\"inline-block\";\r\n");
      out.write("			div.style[\"background-color\"]=\"#FFE400\";\r\n");
      out.write("			div.style[\"border-radius\"]=\"2px\";\r\n");
      out.write("			div.style['color'] =\"black\"\r\n");
      out.write("			div.style[\"padding\"]=\"3px\";\r\n");
      out.write("			div.style[\"border-radius\"]=\"3px\";\r\n");
      out.write("			div.style[\"margin-right\"]=\"33px\";\r\n");
      out.write("			div.style[\"font-size\"]=\"15px\"\r\n");
      out.write("			div.style[\"font-family\"]=\"맑은 고딕\"\r\n");
      out.write("			//div에 innerHTML로 문자 넣기\r\n");
      out.write("			div.innerHTML = inputMessage.value;\r\n");
      out.write("			document.getElementById('messageWindow2').appendChild(div);\r\n");
      out.write("			//clear div 추가\r\n");
      out.write("			var clear = document.createElement('div');\r\n");
      out.write("			clear.style[\"clear\"] = \"both\";\r\n");
      out.write("			document.getElementById('messageWindow2').appendChild(clear);\r\n");
      out.write("			//inputMessage의 value값을 지운다.\r\n");
      out.write("			inputMessage.value = '';\r\n");
      out.write("			//textarea의 스크롤을 맨 밑으로 내린다.\r\n");
      out.write("			messageWindow2.scrollTop = messageWindow2.scrollHeight;\r\n");
      out.write("			//금방 보낸 사람을 임시 저장한다.\r\n");
      out.write("			re_send = \"");
      out.print(nick);
      out.write("\";\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
